from __future__ import annotations
from dataclasses import dataclass
from typing import Optional, Iterable, BinaryIO, Protocol

@dataclass
class StorageObject:
    key: str
    url: str
    size: int
    etag: Optional[str] = None
    content_type: Optional[str] = None

class StorageBackend(Protocol):
    def upload_file(self, src_path: str, dest_key: str, content_type: Optional[str] = None) -> StorageObject: ...
    def upload_bytes(self, data: bytes, dest_key: str, content_type: Optional[str] = None) -> StorageObject: ...
    def open_stream(self, key: str) -> BinaryIO: ...
    def download_to_file(self, key: str, dest_path: str) -> None: ...
    def delete(self, key: str) -> None: ...
    def exists(self, key: str) -> bool: ...
    def url_for(self, key: str) -> str: ...
